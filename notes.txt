-> The routes are defined by the name of folders and repositories 
where the pages are inside

-> The layout.tsx works like a wrapper. All application are inside the layout.
Works closely like a angular.component

->The layout can be implemented in all route folders, as a way to have something present in every part of that component

-> It is also possible to have a shared layout, where a folder is created with two folders inside, example:
A login page and a registration page, and in them we can have, within the mother page, a layout that 
is shared between both, as is in the auth folder

-> When you want a folder name not to appear in the route, you must place () around the name

Os Server components são aqueles onde são feitos no Node,
e não possuem Javascript no lado do cliente.

Os Client componentes, tem o Javascript enviado ao navegador,
e possui interatividade por meio do JS.
-> E para usar o client component basta vocÊ adicionar:
'use client'

-> Hidratação é pegar um HTML totalmente estático e dar dinamicidade
para ele acrescentando JS.
|-> Um comp com use client foi hidratado

-> Os componentes podem ser assícronos, fazendo que o HTML só seja exibido
após o completamento da promise

O next é excelente para a parte de SEO de uma página, pois como a renderização
vem pelo lado servidor, não há uma demora no carregamento da tela.

-> Sempre quando você tiver um arquivo que tiver carregamento de dados, com chamada de api
no mesmo diretório, você pode criar uma arquivo de Loading, com tempo baseado no timeout
E se for posto na raiz src, o loading vai ser aplicar para todos os componentes que tiverem 
uma chamada fetch e timeout

OBS - Quando sua aplicação tiver pouca interatividade, você pode criar componentes fora a parte, como
por exemplo um botão. Pois quanto menos client 0components tiver, melhor e mais leve nossa
aplicação fica

OBS: Quando vocÊ criar um client component, os outros files dentro dessa pasta serão automaticamente client
components. E para muda-los e transforma-los em server você deve passar como children props a página de componente
que é client, e dentro da paghe.tsx, passar o componente que vc quer que seja server

OBSS: Qudo importamos um server component com assíncronismo, a page na qual ele foi importado só exibirá seu conteúdo
quando a função assíncrona for executada
-> Mas para resolver isso, usamos a SuspenseApi do React, onde deve ser importada e utilizada como um componenteem 
volta do comp com a função assíncrona