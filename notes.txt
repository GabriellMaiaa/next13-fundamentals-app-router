-> The routes are defined by the name of folders and repositories 
where the pages are inside

-> The layout.tsx works like a wrapper. All application are inside the layout.
Works closely like a angular.component

->The layout can be implemented in all route folders, as a way to have something present in every part of that component

-> It is also possible to have a shared layout, where a folder is created with two folders inside, example:
A login page and a registration page, and in them we can have, within the mother page, a layout that 
is shared between both, as is in the auth folder

-> When you want a folder name not to appear in the route, you must place () around the name

<<<<<<< HEAD
<<<<<<< HEAD
-> And when we have things that need an id, like products, we must create a separate folder with [] around the name, and pass the tsx code into it

-> everything created in next is done server-side, hence the name React server

Os Server components são aqueles onde são feitos no Node,
e não possuem Javascript no lado do cliente.

Os Client componentes, tem o Javascript enviado ao navegador,
e possui interatividade por meio do JS.
-> E para usar o client component basta vocÊ adicionar:
'use client'
=======
-> And when we have things that need an id, like products, we must create a separate folder with [] around the name, and pass the tsx code into it
>>>>>>> 3a919cb793e84c4da3c9e17312da3eec23d46b5d
=======
-> And when we have things that need an id, like products, we must create a separate folder with [] around the name, and pass the tsx code into it
>>>>>>> 3a919cb793e84c4da3c9e17312da3eec23d46b5d
